<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">


    <!--//// Resources ////-->

    <!--
        JNDI reference of the default SQL DataSource defined in META-INF/context.xml or in Servlet Container.
        Actual database connection should be always managed by Servlet Container!
    -->
    <resource-ref>
        <description>SQL DataSource</description>
        <res-ref-name>jdbc/DS</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>

    <!--
        When no JNDI resource is bound, then “Production” is chosen as default.
        You should change it to “Development” on your development machine. If you’re using Tomcat, add to server.xml:
        <GlobalNamingResources>
            <Environment name="jsf/ProjectStage" value="Development" type="java.lang.String" />
        </GlobalNamingResources>
    -->
    <resource-env-ref>
        <description>JSF Project Stage</description>
        <resource-env-ref-name>jsf/ProjectStage</resource-env-ref-name>
        <resource-env-ref-type>java.lang.String</resource-env-ref-type>
    </resource-env-ref>
    

    <!--//// Contexts ////-->

    <!-- Spring’s parameter to identify root path of this webapp.
    This value must be unique per Servlet Container. -->
    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>webapp.root.rssc</param-value>
    </context-param>

    <!-- Path to log4j configuration file. -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>/WEB-INF/log4j.xml</param-value>
    </context-param>

    <!-- The definition of the root Spring Container shared by all Servlets and Filters -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/spring/root-context.xml</param-value>
    </context-param>
    
<!--    <context-param>
        <param-name>javax.faces.DEFAULT_SUFIX</param-name>
        <param-value>.xhtml</param-value>
    </context-param>-->
    
    <context-param>
        <param-name>primefaces.THEME</param-name>
        <param-value>bootstrap</param-value>
    </context-param>


    <!--//// Listeners ////-->

    <!-- Bootstrap listener for custom Log4J initialization. -->
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>

    <!-- Creates the Spring Container shared by all Servlets and Filters -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- Exposes the request to the current thread, through both LocaleContextHolder and RequestContextHolder. -->
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>
    
    <!--//// Filters ////-->
    
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>
            org.springframework.web.filter.DelegatingFilterProxy
        </filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
<!--        <dispatcher>FORWARD</dispatcher>
        <dispatcher>REQUEST</dispatcher>-->
    </filter-mapping>

    <!--//// Servlets ////-->

    <servlet>
        <servlet-name>Faces Servlet</servlet-name>
        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>*.jsf</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>*.xhtml</url-pattern>
    </servlet-mapping>
    
    
    <!--//// Session ////-->

    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>

</web-app>